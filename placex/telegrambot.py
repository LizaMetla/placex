import logging
import re

from django.core.validators import validate_email
from django_telegrambot.apps import DjangoTelegramBot
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import CommandHandler, MessageHandler, Filters, CallbackQueryHandler

from placex.settings import SEARCH_KEYS
from placex.utils import get_keys_from_message, set_keys_on_user
from rent.models import User
from placex.settings_common import PARSERS, ADMIN_EMAILS

HELP_BUTTON_CALLBACK_DATA = 'help'
help_button = InlineKeyboardButton(
    text='Help me',  # text that show to user
    callback_data=HELP_BUTTON_CALLBACK_DATA  # text that send to bot when user tap button
)

logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments bot and
# update. Error handlers also receive the raised TelegramError object in error.
def start(bot, context):
    chat_id = bot.message.chat.id
    user, created = User.objects.get_or_create(chat_id=chat_id)
    if created:
        user.is_new = True
    user.name = bot.message.chat.first_name or '–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π' + '' + bot.message.chat.last_name or '–∫–ª–∏–µ–Ω—Ç'
    user.save()
    if not user.is_send:
        user.is_send = True
        user.save()
    if not user.email:
        context.bot.send_message(chat_id,
                                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email. \n–û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –≤–∞—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–ø–∞–º–∞.')
    else:
        context.bot.send_message(chat_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ ' \
                                          '–ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ /help',
                                 reply_markup=InlineKeyboardMarkup([[help_button]]))
        context.bot.send_message(chat_id, '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∏–∂–µ:',
                                 reply_markup=main_menu_keyboard())


def _help(bot, context):
    chat_id = bot.callback_query.message.chat.id
    message = '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ –∫–≤–∞—Ä—Ç–∏—Ä/–∫–æ–º–Ω–∞—Ç –∏ —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö ' \
              '–æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö. \n' \
              '–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –≤–æ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏—Ç–µ "–£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É!"'
    context.bot.send_message(chat_id, text=message)


def echo(bot, context):
    # logger.info(str(dir(context.update)))
    chat_id = bot.message.chat.id

    user, created = User.objects.get_or_create(chat_id=chat_id)
    if created:
        user.is_new = True
    if not user.name:
        user.name = bot.message.chat.first_name or '–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π' + '' + bot.message.chat.last_name or '–∫–ª–∏–µ–Ω—Ç'
    user.save()
    is_permissions = True
    search_res = re.search(r'<placex>.+</placex>', bot.message.text)
    if search_res:
        code = search_res.group(0)
        code = code.replace('<placex>', '').replace('</placex>', '')
        user_in_site = User.objects.filter(attachment_code=code).first()
        if user_in_site and user_in_site != user:
            user_in_site.chat_id = user.chat_id
            user_in_site.price_max = user.price_max
            user_in_site.price_min = user.price_min
            user_in_site.is_send = user.is_send
            user_in_site.is_onliner = user.is_onliner
            user_in_site.is_kufar = user.is_kufar
            user_in_site.save()
            user.delete()
            user = user_in_site

    if not user.is_send:
        is_permissions = False
        context.bot.send_message(chat_id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start. \n' \
                                               '–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞')
    elif not user.email:
        try:
            validate_email(bot.message.text)
            user.email = bot.message.text
            user.save()
            # if user.email in ADMIN_EMAILS:
            user.is_onliner = True
            user.is_kufar = True
            user.save()
            context.bot.send_message(chat_id, text='–°–ø–∞—Å–∏–±–æ üòò \n' \
                                                   '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞. \n' \
                                                   '–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ \n' \
                                                    '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /stop', reply_markup=InlineKeyboardMarkup([[help_button]]))
            context.bot.send_message(chat_id, '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∏–∂–µ:',
                                     reply_markup=main_menu_keyboard())
        except:
            is_permissions = False
            context.bot.send_message(chat_id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π email. \n' \
                                                   '–û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –≤–∞—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–ø–∞–º–∞.')

    elif not any(getattr(user, permission, False) for permission in PARSERS) and is_permissions:
        is_permissions = False
        context.bot.send_message(chat_id, text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è ' \
                                               '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. \n' \
                                               '–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞ –ø–æ—á—Ç—É: \n' \
                                               'domen699@gmail.com \n' \
                                               '–°–ø–∞—Å–∏–±–æ üòâ')

    elif is_permissions == True:
        if search_res:
            context.bot.send_message(chat_id,
                                     text=f'{user.name}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–≤—è–∑–∞–ª–∏ –±–æ—Ç–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º placex.\n–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /help –∏–ª–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è placex')
        else:
            if bot.message.text == '–£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É!':
                context.bot.send_message(chat_id, text='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –∞—Ä–µ–Ω–¥–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã:',
                                         reply_markup=cost_menu_keyboard())
            elif bot.message.text =='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ :(':
                stop(bot, context)
            else:
                context.bot.send_message(chat_id, text=bot.message.text)


def error(bot, update, error):
    logger.warning('Update "%s" caused error "%s"' % (update, error))


def stop(bot, context):
    chat_id = bot.message.chat.id
    user = User.objects.get(chat_id=chat_id)
    user.is_send = False
    user.is_new = True
    user.save()
    message = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start'
    context.bot.send_message(chat_id, text=message)


def set_max_price(bot, context, price):
    chat_id = bot.callback_query.message.chat.id
    user = User.objects.get(chat_id=chat_id)
    user.price_max = price
    user.save()
    context.bot.send_message(chat_id, text=f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ {price}$')


def set_min_price(bot, context, price):
    chat_id = bot.callback_query.message.chat.id
    user = User.objects.get(chat_id=chat_id)
    user.price_min = price
    user.save()
    context.bot.send_message(chat_id, text=f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ {price}$')


def callback_query_handler(bot, update):
    cqd = bot.callback_query.data
    # message_id = update.callback_query.message.message_id
    # update_id = update.update_id
    if cqd == HELP_BUTTON_CALLBACK_DATA:
        _help(bot, update)
    elif cqd == 'm1':
        set_max_price(bot, update, 300)
    elif cqd == 'm2':
        set_max_price(bot, update, 400)
    elif cqd == 'm3':
        set_max_price(bot, update, 510)
    elif cqd == 'm4':
        set_max_price(bot, update, 1000)
    elif cqd == 'm5':
        set_min_price(bot, update, 0)
    elif cqd == 'm6':
        set_min_price(bot, update, 100)
    elif cqd == 'm7':
        set_min_price(bot, update, 300)
    elif cqd == 'm8':
        set_min_price(bot, update, 450)


def main_menu_message():
    return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ USD!'


def cost_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton('–û—Ç 0$', callback_data='m5'), InlineKeyboardButton('–î–æ 300$', callback_data='m1')],
        [InlineKeyboardButton('–û—Ç 100$', callback_data='m6'), InlineKeyboardButton('–î–æ 400$', callback_data='m2')],
        [InlineKeyboardButton('–û—Ç 300$', callback_data='m7'), InlineKeyboardButton('–î–æ 510$', callback_data='m3')],
        [InlineKeyboardButton('–û—Ç 450$', callback_data='m8'), InlineKeyboardButton('–î–æ 1000$', callback_data='m4')],
        ]
    return InlineKeyboardMarkup(keyboard)


def main_menu_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton('–£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É!', callback_data='cost_menu'), KeyboardButton('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ :(')]], resize_keyboard=True,
                               one_time_keyboard=False)


def main():
    logger.info("Loading handlers for telegram bot")

    # Default dispatcher (this is related to the first bot in settings.DJANGO_TELEGRAMBOT['BOTS'])
    dp = DjangoTelegramBot.dispatcher
    # To get Dispatcher related to a specific bot
    # dp = DjangoTelegramBot.getDispatcher('BOT_n_token')     #get by bot token
    # dp = DjangoTelegramBot.getDispatcher('BOT_n_username')  #get by bot username

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("stop", stop))

    # on noncommand i.e message - echo the message on Telegram
    dp.add_handler(MessageHandler(Filters.text, echo))
    dp.add_handler(CallbackQueryHandler(callback_query_handler))
    # log all errors
    dp.add_error_handler(error)
