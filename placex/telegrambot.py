import logging

from django.core.validators import validate_email
from django_telegrambot.apps import DjangoTelegramBot
from telegram.ext import CommandHandler, MessageHandler, Filters

from rent.models import User
from placex.settings_common import PARSERS, ADMIN_EMAILS
from placex.utils import site_parser

logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments bot and
# update. Error handlers also receive the raised TelegramError object in error.
def start(bot, context):
    chat_id = bot.message.chat.id
    user, _ = User.objects.get_or_create(chat_id=chat_id)
    user.name = bot.message.chat.first_name or '–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π' + '' + bot.message.chat.last_name or '–∫–ª–∏–µ–Ω—Ç'
    user.save()
    if not user.is_send:
        user.is_send = True
        user.save()
    if not user.email:
        context.bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email. \n–û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –≤–∞—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–ø–∞–º–∞.')
    else:
        context.bot.send_message(chat_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ ' \
                                                             '–ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ /help')


def _help(bot, context):
    chat_id = bot.message.chat.id
    message = '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ –∫–≤–∞—Ä—Ç–∏—Ä/–∫–æ–º–Ω–∞—Ç –∏ —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö ' \
              '–æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö. \n' \
              '–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã: \n' \
              'max=< –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ USD, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300$ > \n ' \
              'min=< –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ USD, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100$ > \n'
    context.bot.send_message(chat_id, text=message)


def echo(bot, context):
    # logger.info(str(dir(context.update)))
    chat_id = bot.message.chat.id

    user, _ = User.objects.get_or_create(chat_id=chat_id)
    user.name = bot.message.chat.first_name or '–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π' + '' + bot.message.chat.last_name or '–∫–ª–∏–µ–Ω—Ç'
    user.save()
    is_permissions = True

    if not user.is_send:
        is_permissions = False
        context.bot.send_message(chat_id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start. \n' \
                                                             '–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞')
    elif not user.email:
        try:
            validate_email(bot.message.text)
            user.email = bot.message.text
            user.save()
            # if user.email in ADMIN_EMAILS:
            user.is_onliner = True
            user.is_kufar = True
            user.save()
            context.bot.send_message(chat_id, text='–°–ø–∞—Å–∏–±–æ üòò \n' \
                                                                 '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞. \n' \
                                                                 '–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /help')
        except:
            is_permissions = False
            context.bot.send_message(chat_id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π email. \n' \
                                                                 '–û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –≤–∞—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–ø–∞–º–∞.')

    elif not any(getattr(user, permission, False) for permission in PARSERS) and is_permissions:
        is_permissions = False
        context.bot.send_message(chat_id, text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ—Ö–æ–∂–µ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è ' \
                                                             '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. \n' \
                                                             '–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞ –ø–æ—á—Ç—É: \n' \
                                                             'domen699@gmail.com \n' \
                                                             '–°–ø–∞—Å–∏–±–æ üòâ')

    elif is_permissions == True:
        context.bot.send_message(bot, chat_id, bot.message.text)


def error(bot, update, error):
    logger.warning('Update "%s" caused error "%s"' % (update, error))


def stop(bot, context):
    chat_id = bot.message.chat.id
    user = User.objects.get(chat_id=chat_id)
    user.is_send = False
    user.save()
    message = '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /start'
    context.bot.send_message(chat_id, text=message)


def main():
    logger.info("Loading handlers for telegram bot")

    # Default dispatcher (this is related to the first bot in settings.DJANGO_TELEGRAMBOT['BOTS'])
    dp = DjangoTelegramBot.dispatcher
    # To get Dispatcher related to a specific bot
    # dp = DjangoTelegramBot.getDispatcher('BOT_n_token')     #get by bot token
    # dp = DjangoTelegramBot.getDispatcher('BOT_n_username')  #get by bot username

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", _help))
    dp.add_handler(CommandHandler("stop", stop))

    # on noncommand i.e message - echo the message on Telegram
    dp.add_handler(MessageHandler(Filters.text, echo))

    # log all errors
    dp.add_error_handler(error)
